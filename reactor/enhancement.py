from .rule import Rule

class BaseEnhancement(object):
    """ Enhancements take a dictionary object and modify it in some way provide enhancement. """

    def __init__(self, rule: Rule):
        self.rule = rule


class MatchEnhancement(BaseEnhancement):
    """
    Enhancements take a match dictionary object and modify it in some way to
    enhance an alert. These are specified in each rule under the match_enhancements option.
    Generally, the key value pairs in the match module will be contained in the alert body.
    """

    def process(self, match):
        """
        Modify the contents of match, a dictionary, in some way
        :raises: DropMatchException
        """
        raise NotImplementedError()


class AlertEnhancement(BaseEnhancement):
    """
    Enhancements take an alert dictionary object and modify it in some way to
    enhance an alert. These are specified in each rule under the alert_enhancements option.
    """

    def process(self, alert: dict):
        """ Modify the contents of alert, a dictionary, in some way """
        raise NotImplementedError()


class DropException(Exception):
    """ Reactor will drop an alert if this exception type is raised by an enhancement """
    pass


class MetaDataAlertEnhancement(AlertEnhancement):
    """
    Enhances an alert with the values of options listed in the ``metadata_fields`` option in a rule configuration.
    Defaults to ``category``, ``description``, ``owner``, and ``priority``.
    For example, if the rule configuration was: ::

        ---
        name: Example Rule
        category: foo
        owner: username
        priority: 2
        # rest of the config goes here
        ...


    Any alert from generated by the rule would include the following additional properties: ::

        {
          "category": "foo",
          "description": null,
          "owner": "username",
          "priority": 2
        }
    """
    def __init__(self, rule: Rule):
        super(MetaDataAlertEnhancement, self).__init__(rule)
        self._metadata = self.rule.conf('metadata_fields', ['category', 'description', 'owner', 'priority'])

    def process(self, alert: dict):
        for field in self._metadata:
            alert.setdefault(field, self.rule.conf(field))
